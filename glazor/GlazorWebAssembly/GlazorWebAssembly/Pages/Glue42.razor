@page "/glue"
@using Glue.Transport
@using Glue.Logging
@using Glue.AppManager
@using Glue.Channels
@inject IGlueLoggerFactory GlueLoggerFactory
@inject GlueProvider glueProvider

<h1>Glue demo</h1>

<div class="row">
    <div class="col-sm">
        <button class="btn btn-primary btn-sm" @onclick="RegisterMethod">Register Method</button>
    </div>
    <div class="col-sm">
        <button class="btn btn-primary btn-sm" @onclick="InvokeMethod">Invoke Method</button>
    </div>
    <div class="col-sm">
        <button class="btn btn-primary btn-sm" @onclick="StartApplication">Start application</button>
    </div>
    <div class="col-sm">
        <button class="btn btn-primary btn-sm" @onclick="SetInstrument">Set Instrument</button>
    </div>
    <div class="col-md">
        <select @bind="selectedInstrument">
            <option value=""></option>
            @foreach (var instrument in availableInstruments)
            {
                <option value="@instrument">@instrument</option>
            }
        </select>
    </div>
</div>

<div class="row">
    <div class="col-sm-1"><strong>Endpoint</strong></div>
    <div class="col">@serverInterop</div>
</div>

<div class="row">
    <div class="col-sm-1"><strong>Invokes</strong></div>
    <div class="col">@clientInterop</div>
</div>


@code{
    private IGlue42Base glue_;
    readonly string methodName = "glazor";

    private async Task RegisterMethod()
    {
        await EnsureGlue().ConfigureAwait(false);
        await glue_.Interop.RegisterEndpoint(builder => builder.SetName(methodName), async context =>
        {
            serverInterop = $"Last invocation from {context.Caller.ApplicationName}: {context.Arguments.AsString()}";
            await context.ResultBuilder.Succeed().ConfigureAwait(false);
        }).ConfigureAwait(false);

        serverInterop = string.Empty;
        serverInterop = $"Registered method: {methodName}";
    }

    string serverInterop = string.Empty;
    string clientInterop = string.Empty;

    private async Task InvokeMethod()
    {
        await EnsureGlue().ConfigureAwait(false);
        var invocationResult = await glue_.Interop.Invoke(methodName, new Dictionary<string, object>
        {
            {
                "X",
                new {Y = "inner"}
            },
            {
                "more_info",
                new {When = DateTime.UtcNow}
            }
        }).ConfigureAwait(false);

        var status = invocationResult.IsFailed ? "Failed" : "Succeeded";

        clientInterop = string.Empty;
        clientInterop = $"Invoked method: {methodName} with status: {status}";
    }

}

@code {
    string selectedInstrument = "";

    readonly List<string> availableInstruments = new List<string>
    {
        "VOD:LN",
        "BARC:LN",
        "BMW:GR",
        "AAL:LN",
        "GOOGL:US",
        "MSFT:US",
        "TEAM:US",
        "CRM:US",
        "JPM:US",
        "FB:US"
    };

}

@code
{
    private async Task StartApplication()
    {
        await EnsureGlue().ConfigureAwait(false);
        var app = await glue_.AppManager.AwaitApplication(a => a.Name == "channelsclientportfolio").ConfigureAwait(false);

        var instance = await app.Start(AppManagerContext.CreateNew(GlueLoggerFactory.GetLogger(nameof(StartApplication)))).ConfigureAwait(false);
    }
}

@code {

    private async Task SetInstrument()
    {
        await EnsureGlue().ConfigureAwait(false);

        var mainWindow = await glueProvider.GetMainWindow().ConfigureAwait(false);

        IGlueChannelContext channelContext = null;

        if (mainWindow?.ChannelContext != null)
        {
            channelContext = mainWindow.ChannelContext;
        }
        else
        {
            var redChannel = await glue_.Channels.AwaitChannel(channel => channel.Name == "Red").ConfigureAwait(false);

            channelContext = glue_.Channels.JoinChannel(redChannel);
        }

        await channelContext.SetValue(selectedInstrument, "partyPortfolio.ric").ConfigureAwait(false);
    }

}

@code
{
    private async Task EnsureGlue()
    {
        glue_ ??= await glueProvider.InitGlue().ConfigureAwait(false);
    }
}
