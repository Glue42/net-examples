@page "/glue"
@inject GlueProvider glueProvider

<h1>Glue demo</h1>

<div class="row">
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="RegisterMethod">Register Method</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="InvokeMethod">Invoke Method</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="SetInstrument">Set Instrument</button>
    </div>
    <div class="col-sm-2">
        <select @bind="selectedInstrument">
            <option value=""></option>
            @foreach (var instrument in availableInstruments)
            {
                <option value="@instrument">@instrument</option>
            }
        </select>
    </div>
</div>

<div class="row">
    <div class="col">
        @interopMessage
    </div>
</div>

@code{
    private IGlue42Base glue_;
    string methodName = "glazor";

    private async Task RegisterMethod()
    {
        await EnsureGlue().ConfigureAwait(false);
        await glue_.Interop.RegisterEndpoint(builder => builder.SetName(methodName), async context =>
        {
            await context.ResultBuilder.Succeed().ConfigureAwait(false);
        }).ConfigureAwait(false);

        interopMessage = string.Empty;
        interopMessage = $"Registered method: {methodName}";
    }

    string interopMessage = string.Empty;

    private async Task InvokeMethod()
    {
        await EnsureGlue().ConfigureAwait(false);
        var invocationResult = await glue_.Interop.Invoke(methodName, new Dictionary<string, object>()).ConfigureAwait(false);

        var status = invocationResult.IsFailed ? "Failed" : "Succeeded";

        interopMessage = string.Empty;
        interopMessage = $"Invoked method: {methodName} with status: {status}";
    }
}

    @code {
        string selectedInstrument = "";

        List<string> availableInstruments = new List<string>()
{
        "VOD:LN",
        "BARC:LN",
        "BMW:GR",
        "AAL:LN",
        "GOOGL:US",
        "MSFT:US",
        "TEAM:US",
        "CRM:US",
        "JPM:US",
        "FB:US"
    };

    }

    @code {
        private async Task SetInstrument()
        {
            await EnsureGlue().ConfigureAwait(false);
            var redChannel = await glue_.Channels.AwaitChannel(channel => channel.Name == "Red").ConfigureAwait(false);

            var context = glue_.Channels.JoinChannel(redChannel);

            await context.SetValue(selectedInstrument, "partyPortfolio.ric").ConfigureAwait(false);
        }
    }

@code
{
    private async Task EnsureGlue()
    {
        glue_ ??= await glueProvider.InitGlue().ConfigureAwait(false);
    }
}
