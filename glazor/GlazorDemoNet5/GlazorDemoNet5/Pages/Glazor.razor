@page "/glazordemo"
@inject InteropProvider interopProvider
@inject IJSRuntime js

<h1>Glazor demo</h1>

<div class="row">
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="RegisterMethod">Register Method</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="InvokeMethod">Invoke Method</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="SetInstrument">Set Instrument</button>
    </div>
    <div class="col-sm-2">
        <select @bind="selectedInstrument">
            <option value=""></option>
            @foreach (var instrument in availableInstruments)
            {
                <option value="@instrument">@instrument</option>
            }
        </select>
    </div>
</div>

<div class="row">
    <div class="col">
        @interopMessage
    </div>
</div>

@code {
    string selectedInstrument = "";

    List<string> availableInstruments = new List<string>()
{
        "VOD:LN",
        "BARC:LN",
        "BMW:GR",
        "AAL:LN",
        "GOOGL:US",
        "MSFT:US",
        "TEAM:US",
        "CRM:US",
        "JPM:US",
        "FB:US"
    };
}

@code{
    string methodName = "glazor";
    private async Task RegisterMethod()
    {
        var interop = await GetInterop().ConfigureAwait(false);

        await interop.RegisterEndpoint(builder => builder.SetName(methodName), async context =>
        {
            await context.ResultBuilder.Succeed().ConfigureAwait(false);
        }).ConfigureAwait(false);

        interopMessage = string.Empty;
        interopMessage = $"Registered method: {methodName}";
    }

    string interopMessage = string.Empty;

    private async Task InvokeMethod()
    {
        var interop = await GetInterop().ConfigureAwait(false);

        var invocationResult = await interop.Invoke(methodName, new Dictionary<string, object>()).ConfigureAwait(false);

        var status = invocationResult.IsFailed ? "Failed" : "Succeeded";

        interopMessage = string.Empty;
        interopMessage = $"Invoked method: {methodName} with status: {status}";
    }
}

@code {
    private async Task SetInstrument()
    {
        //Assuming that there is an application open and set to the Red channel it will change the instrument
        var channels = await GetChannels().ConfigureAwait(false);

        var redChannel = await channels.AwaitChannel(channel => channel.Name == "Red").ConfigureAwait(false);

        var context = channels.JoinChannel(redChannel);
            
        await context.SetValue(selectedInstrument, "partyPortfolio.ric").ConfigureAwait(false);
    }
}

@code {
    private Task<IGlueChannels> GetChannels()
        => interopProvider.InitChannels();
    private Task<IGlueInterop> GetInterop()
        => interopProvider.InitInterop();
}
