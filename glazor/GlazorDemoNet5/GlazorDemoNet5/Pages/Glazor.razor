@page "/glazordemo"
@inject GlueProvider glueProvider_
@inject IJSRuntime js

<h1>Glazor demo</h1>

<div class="row">
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="RegisterMethod">Register Method</button>
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="InvokeMethod">Invoke Method</button>
    </div>

    <div class="col-sm-2">
        <label>Channel: </label>
        <select @bind="selectedChannel">
            <option value=""></option>

            @foreach (var channel in channels)
            {
                <option value="@channel">@channel</option>
            }
        </select>
    </div>

    <div class="col-sm-2">
        <button class="btn btn-primary btn-sm" @onclick="SetInstrument">Set Instrument</button>
    </div>

    <div class="col-sm-2">
        <select @bind="selectedInstrument">
            <option value=""></option>
            @foreach (var instrument in availableInstruments)
            {
                <option value="@instrument">@instrument</option>
            }
        </select>
    </div>
</div>

<div class="row">
    <div class="col">
        @interopMessage
    </div>
</div>

@code {

    readonly List<string> channels = new(new[]
    {
        "Red",
        "Green",
        "Blue",
        "Pink",
        "Yellow",
        "DarkYellow",
        "Orange",
        "Purple",
        "Lime",
        "Cyan"
    });


    string selectedInstrument = "";

    string selectedChannel = "Red";

    readonly List<string> availableInstruments = new()
    {
        "VOD:LN",
        "BARC:LN",
        "BMW:GR",
        "AAL:LN",
        "GOOGL:US",
        "MSFT:US",
        "TEAM:US",
        "CRM:US",
        "JPM:US",
        "FB:US"
    };

}

@code{
    IGlue42Base glue_;

    protected override async Task OnInitializedAsync()
    {
        glue_ = await glueProvider_.InitGlue().ConfigureAwait(false);
        await glue_.Channels.AwaitChannel("Red").ConfigureAwait(false);
    }

}

@code{
    readonly string methodName = "glazor";

    private async Task RegisterMethod()
    {
        AspNetDispatcher s = new AspNetDispatcher(Dispatcher.CreateDefault());

        await glue_.Interop.RegisterEndpoint(builder => builder.SetName(methodName), async context => { await context.ResultBuilder.Succeed().ConfigureAwait(false); }).ConfigureAwait(false);

        interopMessage = string.Empty;
        interopMessage = $"Registered method: {methodName}";
    }

    string interopMessage = string.Empty;

    private async Task InvokeMethod()
    {
        var invocationResult = await glue_.Interop.Invoke(methodName, new Dictionary<string, object>()).ConfigureAwait(false);

        var status = invocationResult.IsFailed ? "Failed" : "Succeeded";

        interopMessage = string.Empty;
        interopMessage = $"Invoked method: {methodName} with status: {status}";
    }

}

@code {

    private async Task SetInstrument()
    {
        if (string.IsNullOrWhiteSpace(selectedChannel))
        {
            return;
        }


    // await the channel by name
        var channel = await glue_.Channels.AwaitChannel(selectedChannel).ConfigureAwait(false);

    // get its writable context by joining it
        var context = glue_.Channels.JoinChannel(channel);

    //Assuming that there is an application open and set to the selected channel it will change the instrument
        await context.SetValue(selectedInstrument, "partyPortfolio.ric").ConfigureAwait(false);
    }

}
